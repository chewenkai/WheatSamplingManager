package com.aj.collection.activity

import android.app.Activity
import android.app.AlertDialog
import android.app.Dialog
import android.app.ProgressDialog
import android.content.Context
import android.content.Intent
import android.graphics.Color
import android.os.Bundle
import android.provider.Settings
import android.support.v7.app.AppCompatActivity
import android.telephony.SmsManager
import android.util.Log
import android.view.*
import android.widget.*
import com.aj.Constant
import com.aj.SystemBarTintManager
import com.aj.collection.*
import com.aj.collection.activity.http.API
import com.aj.collection.activity.http.ReturnCode
import com.aj.collection.activity.http.URLs
import com.aj.collection.activity.tools.*
import com.aj.collection.activity.ui.HeadControlPanel
import com.aj.collection.activity.ui.HeadControlPanel.LeftImageOnClick
import com.aj.collection.activity.ui.HeadControlPanel.RightSecondOnClick
import com.aj.collection.activity.ui.HeadControlPanel.rightFirstImageOnClick
import com.aj.collection.activity.ui.MyLayout
import com.aj.collection.activity.ui.SheetCellUI
import com.aj.collection.bean.SheetCell
import com.aj.database.*
import com.android.volley.RequestQueue
import com.android.volley.Response
import com.android.volley.toolbox.Volley
import com.baidu.location.BDLocation
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import org.jetbrains.anko.toast
import org.json.JSONArray
import org.json.JSONException
import org.json.JSONObject
import java.io.File

class GatherActivity : AppCompatActivity() {

    internal var intent: Intent? = null                 //传递时间的意图
    internal var sheetJsonStr: String = ""                 //抽样单json
    internal var templetID: Long = 0
    internal var templetName: String = ""             //抽样单模板名称
    internal var samplingID: Long? = -1L          //抽样单ID
    // 抽样单的内容
    val sheetCellUIList = ArrayList<SheetCellUI>()
    // 多张抽样单列表
    val sheetList = ArrayList<ArrayList<SheetCellUI>>()
    // 抽样单模板类
    var sheetCellList = ArrayList<SheetCell>()

    internal var root_path: String = ""              //跟目录
    internal var child_path: String = ""             //储存照片录像等信息的子目录目录
    internal var isFixPoint: Boolean = false             //是否是定点采样
    internal var isMakeUp: Boolean = false
    internal var sid_of_server: Long? = null             //原抽样单的sid
    internal var autoGeneratedSheetID = ""                   //抽样单编号
    internal var whichTask: Long = 0                 //被点击的任务
    internal var taskName: String = ""
    internal var parentView: LinearLayout? = null
    internal var smsManager = SmsManager.getDefault()
    private var phone_number = "15004600323"
    private var kaiguan = false
    private var isHavePicture = false
    private var isHaveVideo = false

    internal var queue: RequestQueue? = null //init Volley;

    private val mContext = this

    //database part
    var daoSession: DaoSession? = null
    var taskinfoDao: TASKINFODao? = null
    var templettableDao: TEMPLETTABLEDao? = null
    var samplingtableDao: SAMPLINGTABLEDao? = null

    private var samplingtables: List<SAMPLINGTABLE>? = null //当前这张抽样单，应该是一张

    private var taskinfo: TASKINFO? = null

    internal var headPanel: HeadControlPanel? = null

    fun sendMes() {
        if (!kaiguan) {
            SPUtils.put(this@GatherActivity, taskName, true, SPUtils.WHICHTASK)
            T.showShort(this@GatherActivity, "保存成功")
            return
        }
        val sms_content = ""
        if (sms_content.length > 70) {
            val contents = smsManager.divideMessage(sms_content)
            for (sms in contents) {
                smsManager.sendTextMessage(phone_number, null, sms, null, null)
            }
        } else {
            smsManager.sendTextMessage(phone_number, null, sms_content, null, null)
        }
        SPUtils.put(this@GatherActivity, taskName, true, SPUtils.WHICHTASK)
        T.showShort(this@GatherActivity, "保存成功，并已发送定位短信")
    }

    private var etCompanyName: EditText? = null
    private var etItem: EditText? = null
    private var etItemID: EditText? = null
    private var companyName: String? = null
    var itemName: String = ""
    var itemID: String = ""

    override fun onCreate(savedInstanceState: Bundle?) {

        super.onCreate(savedInstanceState)

        dialog = Dialog(this@GatherActivity)
        ExitApplication.getInstance().addActivity(this)
        //dialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

        dialog!!.requestWindowFeature(Window.FEATURE_NO_TITLE)
        requestWindowFeature(Window.FEATURE_NO_TITLE)
        setContentView(R.layout.form_layout)

        queue = Volley.newRequestQueue(this)
        daoSession = ((mContext as Activity).application as CollectionApplication).getDaoSession(mContext)
        taskinfoDao = daoSession!!.taskinfoDao
        templettableDao = daoSession!!.templettableDao
        samplingtableDao = daoSession!!.samplingtableDao
        //沉浸状态栏
        SystemBarTintManager.setStatusBarTint(this@GatherActivity, Color.argb(0, 59, 59, 59))//透明状态栏

        val EMPTY_STRING = ""
        phone_number = SPUtils.get(this, SPUtils.JIANKONG, EMPTY_STRING, SPUtils.get(this, SPUtils.LOGIN_USER, EMPTY_STRING, SPUtils.USER_DATA) as String) as String

        //发送短信的开关是否打开
        val `object` = SPUtils.get(this, SPUtils.KAIGUAN, false, SPUtils.get(this, SPUtils.LOGIN_USER, EMPTY_STRING, SPUtils.USER_DATA) as String)
        if (`object` != null)
            kaiguan = `object` as Boolean
        else
            kaiguan = false

        parentView = findViewById(R.id.form_parent) as LinearLayout

        // 没有下列7行代码会产生焦点问题。EditText获取焦点后，下滑ScrollView会跳回EditText
        val scroll = findViewById(R.id.sheet_scroll_view) as ScrollView
        scroll.setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS)
        scroll.setFocusable(true)
        scroll.setFocusableInTouchMode(true)
        scroll.setOnTouchListener { v, event ->
            v.requestFocusFromTouch()
            return@setOnTouchListener false
        }

        //Intent中包含了关于任务的信息
        intent = getIntent()

        //获取各种任务信息
        whichTask = intent!!.getLongExtra("whichTask", -1)               //获取任务ID
        sheetJsonStr = intent!!.getStringExtra("res")                         //获得抽样单JSON
        templetID = intent!!.getLongExtra("templetID", -1)               //获取模板ID
        isMakeUp = intent!!.getBooleanExtra("isMakeUp", false)           //获取是否是补采的标识
        if (isMakeUp) { //make up have sid
            sid_of_server = intent!!.getLongExtra("sid_of_server", -1)   //获取SID
            samplingID = intent!!.getLongExtra("samplingID", -1)         //获取抽样单的ID
            if (!samplingID!!.equals(-1L))
                samplingtables = samplingtableDao!!.queryBuilder().where(SAMPLINGTABLEDao.Properties.Id.eq(samplingID)).list()
        } else {
            sid_of_server = -1L
        }

        val taskinfos = taskinfoDao!!.queryBuilder().where(TASKINFODao.Properties.TaskID.eq(whichTask)).list()//查询任务
        if (taskinfos.size != 1) {
            printLineInLog()
            finish()
        } else
            taskinfo = taskinfos[0]

        taskName = taskinfo!!.task_name                              //获取任务名称
        templetName = templettableDao!!.queryBuilder().where(TEMPLETTABLEDao.Properties.TempletID.eq(templetID)).list()[0].templet_name       //抽样单模板名称

        //获取并检查创建媒体文件夹
        root_path = Util.getMediaFolder(mContext)
        if (root_path.isEmpty()) {
            Toast.makeText(mContext, "没有媒体文件夹", Toast.LENGTH_LONG).show()
            finish()
        }
        val taskfolder = File(root_path)
        if (!taskfolder.exists() && !taskfolder.mkdirs()) {
            Toast.makeText(mContext, "没有媒体文件夹", Toast.LENGTH_LONG).show()
            finish()
        }

        // New Code

        // 抽样单Json文本转为Json对象
        val resultJson = JSONObject(sheetJsonStr)
        if (!resultJson.has(SheetProtocol().SHEET_JSON_KEY)) {
            toast(getString(R.string.sheet_parse_error))
            finish()
        }

        // 提取抽样单Json文本
        val sheetCells = resultJson.getString(SheetProtocol().SHEET_JSON_KEY)
        // 利用Gson将Json文本转为SheetCell列表
        val turnsType = object : TypeToken<List<SheetCell>>() {}.type
        sheetCellList = Gson().fromJson(sheetCells, turnsType)
        // 加载界面前生成一个抽样单唯一ID
        autoGeneratedSheetID = getAutoGeneratedSheetID()
        // 生成并加载界面
        for (sheetCell: SheetCell in sheetCellList) {
            val cellUI = SheetCellUI(this, sheetCell, autoGeneratedSheetID)
            sheetCellUIList.add(cellUI)
            parentView!!.addView(cellUI.cell.getView())
        }
        // 将当前抽样单添加到列表
        sheetList.add(sheetCellUIList)

        //设置顶部面板按钮
        headPanel = findViewById(R.id.head_layout) as HeadControlPanel
        headPanel!!.setRightFirstVisible(View.VISIBLE)
        headPanel!!.setRightSecondVisible(View.VISIBLE)
        if (headPanel != null) {
            headPanel!!.initHeadPanel()
            headPanel!!.setMiddleTitle(resources.getString(R.string.templetTitle))
            headPanel!!.setLeftImage(R.drawable.ic_menu_back)
            val l = LeftImageOnClick {
                val alertDialog: AlertDialog
                val builder = AlertDialog.Builder(this@GatherActivity, AlertDialog.THEME_HOLO_LIGHT)
                builder.setTitle("温馨提示")
                builder.setMessage("确定要返回吗?")
                builder.setPositiveButton("确定") { dialog, which ->
                    //TODO 判断新拍的照片并删除
                    setResult(Constant.WEIXINTASKREFRESHITEM_FROMDO)
                    Util.decendLocalSeq(applicationContext, 1)
                    finish()    //退出
                }
                builder.setNegativeButton("取消", null)
                alertDialog = builder.create()
                alertDialog.show()    //显示对话框
            }
            headPanel!!.setLeftImageOnClick(l)
            headPanel!!.setRightFirstImage(R.drawable.save_file)
            headPanel!!.setRightFirstText("保存")
            val r = rightFirstImageOnClick {
                //抽样单模板的保存按钮！！

                // 判断必填项是否全部填写
                var isAllRequiredCellFill = true
                for (sheetCellUI in sheetCellUIList) {
                    if (!sheetCellUI.cell.isFilled()){
                        when(sheetCellUI.getCellType()){
                            SheetProtocol().TYPE_EDIT_TEXT -> {
                                isAllRequiredCellFill = false
                            }
                            SheetProtocol().TYPE_ADDRESS -> {
                                toast("正在定位中，请稍后")
                                return@rightFirstImageOnClick
                            }
                            SheetProtocol().TYPE_GEOGRAPHIC_COORDINATES -> {
                                toast("正在定位中，请稍后")
                                return@rightFirstImageOnClick
                            }
                            SheetProtocol().TYPE_RADIO -> {
                                isAllRequiredCellFill = false
                            }
                            SheetProtocol().TYPE_RADIO_WITH_SECONDARY_CHOICE -> {
                                isAllRequiredCellFill = false
                            }
                            SheetProtocol().TYPE_MULTI_SELECT -> {
                                isAllRequiredCellFill = false
                            }
                            SheetProtocol().TYPE_DATE_SELECT -> {
                                isAllRequiredCellFill = false
                            }
                            SheetProtocol().TYPE_SIGN -> {
                                isAllRequiredCellFill = false
                            }
                            SheetProtocol().TYPE_PHOTOS -> {
                                isAllRequiredCellFill = false
                            }
                            SheetProtocol().TYPE_VEDIOS -> {
                                isAllRequiredCellFill = false
                            }
                        }
                    }
                }


                val sheetCount = sheetList.size
                val saveProgressDialog = ProgressDialog(mContext, ProgressDialog.THEME_HOLO_LIGHT)
                saveProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL)
                saveProgressDialog.max = sheetCount
                saveProgressDialog.progress = 1
                saveProgressDialog.setMessage("保存中...")
                saveProgressDialog.setCancelable(false)
                saveProgressDialog.setOnCancelListener { }
                saveProgressDialog.show()

                for (i in 0..sheetCount - 1) {

                    saveProgressDialog.progress = i + 1
                    saveProgressDialog.setMessage("样品" + (i + 1).toString() + "保存中...")


                    try {
                        // 当前表的单元格列表
                        val cellUIList = sheetList[i]
                        val samplingInfoJson = getJsonFromSheet(cellUIList)

                        // 寻找GPS信息单元格
                        var latitudeStr = 0.0
                        var longitudeStr = 0.0
                        var locationType = BDLocation.TypeOffLineLocation
                        val cellGeographicCoordinates = getGPSInfoBySheet(cellUIList)
                        if (cellGeographicCoordinates != null &&
                                TypeGeographicCoordinates::class.java.isInstance(cellGeographicCoordinates.cell)){
                            latitudeStr = (cellGeographicCoordinates.cell as TypeGeographicCoordinates).latitude.toDouble()
                            longitudeStr = (cellGeographicCoordinates.cell as TypeGeographicCoordinates).longitude.toDouble()
                            locationType = (cellGeographicCoordinates.cell as TypeGeographicCoordinates).location_info_type
                        }

                        if (!isMakeUp) {
                            //非补采的抽样单，正常保存抽样单
                            val samplingtable = SAMPLINGTABLE(null, whichTask, templetID, sheetList[i][0].cell.get_cell_value(),
                                    sheetList[i][1].cell.get_cell_value(), samplingInfoJson.toString(), autoGeneratedSheetID,
                                    isAllRequiredCellFill, false, false, false, Constant.S_STATUS_HAVE_NOT_UPLOAD, System.currentTimeMillis(), null, null,
                                    latitudeStr, longitudeStr, locationType, autoGeneratedSheetID)
                            samplingtableDao!!.insertOrReplace(samplingtable)

                            val taskinfo = taskinfoDao!!.queryBuilder().where(TASKINFODao.Properties.TaskID.eq(whichTask)).list()
                            if (taskinfo.size != 1) {
                                Log.e("XXXXXXXXXXXX", "MyLayout.createTextView 1034 line 根据任务iD查询的任务数不等于1 ")
                            }
                            sendMes()
                            finish()
                        } else {
                            //非补采的抽样单，获取服务器ID后保存
                            if (sid_of_server!!.equals(-1L)) {//原抽样单的sid用于上传给服务器，服务器将原抽样单状态置位为“已补采”，不应为不存在
                                Toast.makeText(mContext, "没有接受到sid", Toast.LENGTH_LONG).show()
                                Log.e("XXXXXXXXXXX", "没有接受到sid")
                                return@rightFirstImageOnClick
                            }

                            val listener = Response.Listener<String> { s ->
                                Log.e("setSMadeUpSuc", s)
                                try {
                                    val resultJson = JSONObject(s)
                                    val errorCode = resultJson.getString(URLs.KEY_ERROR)

                                    if (errorCode == ReturnCode.Code0) {//connected

                                        //设置当前抽样单状态为“已补采”
                                        for (i in samplingtables!!.indices) {
                                            samplingtables!![i].check_status = Constant.S_STATUS_NOT_USED
                                            samplingtableDao!!.insertOrReplace(samplingtables!![i])
                                        }

                                        //将当前抽样单以后的抽样单ID+1（即将当前抽样单之后的抽样单往后挪一个，留出一个位置插入补采的抽样单）
                                        if (!samplingID!!.equals(-1L)) {
                                            val allSamplingtables = samplingtableDao!!.queryBuilder().where(SAMPLINGTABLEDao.Properties.Id.between(samplingID!! + 1, samplingtableDao!!.queryBuilder().list().size)).list()

                                            for (i in allSamplingtables.indices) {
                                                allSamplingtables[i].id = allSamplingtables[i].id!! + 1
                                                samplingtableDao!!.insertOrReplace(allSamplingtables[i])
                                            }
                                        }

                                        //将补采抽样单插入
                                        val samplingtable = SAMPLINGTABLE(samplingID!! + 1, whichTask, templetID, sheetList[i][0].cell.get_cell_value() + "-补采",
                                                sheetList[i][1].cell.get_cell_value(), samplingInfoJson.toString(), autoGeneratedSheetID,
                                                isAllRequiredCellFill, false, false, true, Constant.S_STATUS_HAVE_NOT_UPLOAD, System.currentTimeMillis(), null, null,
                                                latitudeStr, longitudeStr, locationType, autoGeneratedSheetID)
                                        samplingtableDao!!.insertOrReplace(samplingtable)

                                        sendMes()

                                        finish()

                                    } else {//other return code
                                        ReturnCode(applicationContext, errorCode, true)
                                    }

                                    if (saveProgressDialog.isShowing)
                                        saveProgressDialog.dismiss()

                                } catch (e: JSONException) {
                                    e.printStackTrace()
                                    printLineInLog()

                                    if (saveProgressDialog.isShowing)
                                        saveProgressDialog.dismiss()
                                }
                            }

                            val errorListener = Response.ErrorListener {
                                if (saveProgressDialog.isShowing)
                                    saveProgressDialog.dismiss()

                                T.showShort(applicationContext, getString(R.string.make_up_sampling_need_network))
                            }

                            //设置服务器的当前抽样单状态为已补采
                            if (samplingtables!!.size == 1)
                                setSamplingStatusMadeUp(listener, errorListener, samplingtables!![0].sid_of_server.toString())
                            else {
                                Toast.makeText(mContext, "查询到多张原抽样单", Toast.LENGTH_LONG).show()
                                printLineInLog()
                                return@rightFirstImageOnClick
                            }
                        }

                        if (saveProgressDialog.progress == sheetCount)
                            saveProgressDialog.dismiss()

                    } catch (e: JSONException) {
                        e.printStackTrace()
                        if (saveProgressDialog.isShowing)
                            saveProgressDialog.dismiss()
                    } catch (e: Exception) {
                        e.printStackTrace()
                        T.showLong(this@GatherActivity, "生成jason错误" +
                                "" + e.toString())
                        if (saveProgressDialog.isShowing)
                            saveProgressDialog.dismiss()
                    }

                }
            }
            headPanel!!.setRightFirstImageOnClick(r)
            headPanel!!.setRightSecondImage(R.drawable.print)
            headPanel!!.seRightSecondText("打印")
            val t = RightSecondOnClick {
                var toPrint = ""

                val i = Intent(this@GatherActivity, PrintActivity::class.java)
                i.putExtra("toPrint", toPrint)
                i.putExtra("num", sheetList[0][0].autoGeneratedSheetID)
                startActivity(i)
            }
            headPanel!!.setRightSecondOnClick(t)

            //非补采时，可以点击添加一个样品信息
            if (!isMakeUp) {
                headPanel!!.setRightThirdImage(R.drawable.add_sampling)
                headPanel!!.setRightThirdText("加样")
                val thirdOnClick = HeadControlPanel.RightThirdOnClick {
                    //加样前要检查样品信息是否合法
                    // 判断GPS信息
                    for (sheetCellUI in sheetCellUIList) {
                        if (!sheetCellUI.cell.isFilled()){
                            when(sheetCellUI.getCellType()){
                                SheetProtocol().TYPE_ADDRESS -> {
                                    toast("正在定位中，请稍后保存")
                                    return@RightThirdOnClick
                                }
                                SheetProtocol().TYPE_GEOGRAPHIC_COORDINATES -> {
                                    toast("正在定位中，请稍后保存")
                                    return@RightThirdOnClick
                                }
                            }
                        }
                    }
                    autoGeneratedSheetID = getAutoGeneratedSheetID()  // 设置新的抽样单ID
                    addSample()  // 添加新的抽样单，可复制的单元格生成界面，不可复制的不生成界面，复制原内容到单元格列表
                }
                headPanel!!.setRightThirdOnClick(thirdOnClick)
                headPanel!!.setmRightThirdVisible(View.VISIBLE)
            }
        }

    }

    /**
     *生成一个抽样单的唯一编号（按照老师的规定）
     */
    fun getAutoGeneratedSheetID(): String {
        val taskinfo = taskinfoDao!!.queryBuilder().where(TASKINFODao.Properties.TaskID.eq(whichTask)).list()
        if (taskinfo.size != 1) {
            toast("生成抽样单编号出错")
            finish()
            return ""
        }
        val taskLetter = taskinfo[0].task_letter
        return Util.getSamplingNum(this, taskLetter)//taskname+imei+date+liushui
    }

    /**
     * 添加或删除完样品情况后重新为样品名称、样品编号、抽样单编号和childpath等赋值
     */
    fun reLoadVariable() {


    }

    /**
     * 将界面解析成Json
     */
    fun getJsonFromSheet(sheetCellUIList:ArrayList<SheetCellUI>):JSONObject{
        var jsonObject = JSONObject()
        val jsonArray = JSONArray()  //
        for (sheetCellUI in sheetCellUIList) {
            jsonArray.put(sheetCellUI.cell.getJsonContent())
        }
        jsonObject.put(SheetProtocol().SHEET_JSON_KEY, jsonArray)
        return jsonObject
    }

    /**
     * 寻找抽样单中的地理位置单元格，如果没有返回空
     */
    fun getGPSInfoBySheet(sheetCellUIList:ArrayList<SheetCellUI>): SheetCellUI?{
        for (sheetCellUI in sheetCellUIList) {
            if (sheetCellUI.getCellType() == SheetProtocol().TYPE_GEOGRAPHIC_COORDINATES)
                return sheetCellUI
        }
        return null
    }

    /**
     * 添加新的抽样单，可复制的单元格生成界面，不可复制的不生成界面，复制原内容到单元格列表
     */
    fun addSample(){
        // 初始化新的单元格列表
        val newSheetCellUIList = ArrayList<SheetCellUI>()
        // 生成并加载界面
        for (i in sheetCellList.indices) {
            if (sheetCellList[i].cell_copyable == SheetProtocol().True){
                // 可复制的单元格，生成新的单元格
                val cellUI = SheetCellUI(this, sheetCellList[i], autoGeneratedSheetID)
                newSheetCellUIList.add(cellUI)
                parentView!!.addView(cellUI.cell.getView())
            }else{
                // 不可复制的单元格，界面上不添加， 单元格列表中添加已经填写的单元格
                newSheetCellUIList.add(sheetCellUIList.get(i))
            }
        }
        // 清除全局单元格列表
        sheetCellUIList.removeAll(sheetCellUIList)
        // 将新的单元格列表赋值到全局单元格列表
        sheetCellUIList.addAll(newSheetCellUIList)
        // 添加新的单元格列表到抽样单列表中
        sheetList.add(sheetCellUIList)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (requestCode == REQUESTCODEFORVIDEO) {
            if (resultCode == Activity.RESULT_OK) {
                isHaveVideo = true
                val uriVideo = data!!.data
                val video_path = uriVideo.toString()
                val video_name = File(video_path).name
                val intent = Intent().setAction(Constant.NEW_VEDIO_BROADCAST_ACT)
                sendBroadcast(intent)
            }
        } else if (requestCode == REQUESTCODEFORPICTURE) {
            if (data != null) {
                // 没有指定特定存储路径的时候
                val id = data.getIntExtra("view_id", 0)        // imageView id
                val pName = data.getStringExtra("pName")    //图片名称
                val picPath = data.getStringExtra("picture_path")
                val intent = Intent().setAction(Constant.NEW_PHOTO_BROADCAST_ACT)
                intent.putExtra(Constant.CELL_ID_EXTRA_KEY, id)
                sendBroadcast(intent)
            } else {
                L.d("data IS null, file saved on target position.")
            }
        }
    }

    override fun onDestroy() {
        //((CollectionApplication)getApplication()).mLocationResult=null;
        //        File todelete = new File(root_path + File.separator + tv_num.getText().toString());
        //        if (todelete.exists())
        //            FileUtil.delete(todelete);

//        lu!!.recycleParentView()
        unregisterAllBroadcast()
        System.gc()
        super.onDestroy()
    }

    /**
     * 在Destroy前取消抽样单中的注册广播
     */
    private fun unregisterAllBroadcast() {
        for (cellUI in sheetCellUIList) {
            when (cellUI.getCellType()) {
                SheetProtocol().TYPE_ADDRESS -> (cellUI.cell as TypeAddress).unregisterLocationBroadcast()
                SheetProtocol().TYPE_GEOGRAPHIC_COORDINATES -> (cellUI.cell as TypeGeographicCoordinates).unregisterLocationBroadcast()
                SheetProtocol().TYPE_PHOTOS -> {
                    (cellUI.cell as TypePhotos).unregisterLocationBroadcast()
                    (cellUI.cell as TypePhotos).unregisterNewPhotoBroadcast()
                }
                SheetProtocol().TYPE_VEDIOS -> {
                    (cellUI.cell as TypeVedios).unregisterLocationBroadcast()
                    (cellUI.cell as TypeVedios).unregisterNewVedioBroadcast()
                }

            }
        }
    }

    override fun onResume() {
        super.onResume()
        val gps = Util.isOpen(this)
        val isNetConnected = (application as CollectionApplication).isNetworkConnected
        if (!gps) {
            openGPSDialog(gps, isNetConnected)

        }
    }

    override fun onKeyDown(keyCode: Int, event: KeyEvent): Boolean {
        if (keyCode == KeyEvent.KEYCODE_BACK) {    //监控back键
            val alertDialog: AlertDialog
            val builder = AlertDialog.Builder(this, AlertDialog.THEME_HOLO_LIGHT)
            builder.setTitle("温馨提示")
            builder.setMessage("确定要返回吗?")
            builder.setPositiveButton("确定") { dialog, which ->
                //TODO 判断新拍的照片并删除
                setResult(Constant.WEIXINTASKREFRESHITEM_FROMDO)
                Util.decendLocalSeq(applicationContext, 1)
                finish()    //退出
            }
            builder.setNegativeButton("取消", null)
            alertDialog = builder.create()
            alertDialog.show()    //显示对话框
        }
        return super.onKeyDown(keyCode, event)
    }

    private var dialog: Dialog? = null

    /**
     * 打开GPS提示对话框
     */
    internal fun openGPSDialog(isGpsOpened: Boolean, isNetWorkOpened: Boolean) {
        if (isGpsOpened)
            return

        if (dialog!!.isShowing) {
            return
        }

        val inflater = this@GatherActivity
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
        val layout = inflater.inflate(
                R.layout.dialogview_three_button, null) as RelativeLayout
        val Title = layout.findViewById(R.id.Alert_Dialog_Title_SlideMenu) as TextView
        val Message = layout.findViewById(R.id.Alert_Dialog_Message_SlideMenu) as TextView

        val positivebutton = layout.findViewById(R.id.textview_positive_button) as TextView
        val openGPRSButton = layout.findViewById(R.id.textview_openGPRS_button) as TextView
        val negativebutton = layout.findViewById(R.id.textview_negative_button) as TextView

        if (isGpsOpened && !isNetWorkOpened) {
            positivebutton.visibility = View.GONE
            openGPRSButton.visibility = View.VISIBLE
            Title.text = "获取位置的描述信息需要开启网络"
            Message.text = "建议开启"
        } else if (!isGpsOpened && isNetWorkOpened) {
            positivebutton.visibility = View.VISIBLE
            openGPRSButton.visibility = View.GONE
            Title.text = "本软件需开启GPS定位开关"
            Message.text = "必须开启，否则无法打开抽样单"
        } else if (!isGpsOpened && !isNetWorkOpened) {
            positivebutton.visibility = View.VISIBLE
            openGPRSButton.visibility = View.VISIBLE
            Title.text = "本软件需开启GPS定位开关\n获取位置的描述信息需要开启网络"
            Message.text = "是否开启？"
        }

        positivebutton.setOnClickListener {
            dialog!!.dismiss()
            val intent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)
            startActivity(intent)
        }

        openGPRSButton.setOnClickListener {
            dialog!!.dismiss()
            if (android.os.Build.VERSION.SDK_INT > 10) {
                //3.0以上打开设置界面，也可以直接用ACTION_WIRELESS_SETTINGS打开到wifi界面
                startActivity(Intent(android.provider.Settings.ACTION_SETTINGS))
            } else {
                startActivity(Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS))
            }
        }

        negativebutton.setOnClickListener {
            dialog!!.dismiss()
            if (!isGpsOpened)
                this@GatherActivity.finish()
        }


        dialog!!.setContentView(layout)
        dialog!!.setCancelable(false)
        dialog!!.show()
    }


    /**
     * 保存的时候 设置抽样单状态为已补采

     * @param listener
     * *
     * @param errorListener
     * *
     * @param sid
     */
    fun setSamplingStatusMadeUp(listener: Response.Listener<String>, errorListener: Response.ErrorListener, sid: String) {
        val stringRequest = API.setSamplingStatusMadeUp(listener, errorListener, SPUtils.get(mContext, SPUtils.LOGIN_NAME, "", SPUtils.LOGIN_VALIDATE) as String, SPUtils.get(mContext, SPUtils.LOGIN_PASSWORD, "", SPUtils.LOGIN_VALIDATE) as String, sid)
        queue!!.add(stringRequest)
    }

    /**
     * 打印行数到日志
     */
    fun printLineInLog() {
        Log.e(GatherActivity::class.java.name, Util.getLineInfo())
    }

    companion object {
        val REQUESTCODEFORDATE = 100001            //接收选择的日期
        //    public static final int REQUESTCODEFORSIGN = 10001;        //接收签名后的图片
        val REQUESTCODEFORPICTURE = 1001           //接收拍照后的图片
        val REQUESTCODEFORVIDEO = 2001             //接收录像的名称

        val NECCESSARY = "neccessary"         //从json中解析必填是否全部填好
        val SAMPLING_JSON_CONT = "cont"       //从json中解析出抽样单界面转成的json
        val SAMPLING_JSON_ITEM = "item"       //从json中解析样品名称
        val SAMPLING_JSON_ITEMID = "itemID"   //从json中解析样品编号
        val SAMPLING_JSON_NUM = "num"         //从json中解析出抽样单编号
        val SAMPLING_JSON_GPS = "gps"         //从json中解析出GPS信息
    }
}
